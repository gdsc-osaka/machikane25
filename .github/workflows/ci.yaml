name: CI

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: CI (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: [photo, photo-cleaner, stamp]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: true
      - name: Install Firebase emulator
        run: |
          npm install -g firebase-tools
          echo "FIREBASE_VIRSION=$(firebase --version)" >> $GITHUB_ENV
      - name: Cache firebase emulators
        uses: actions/cache@v3
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-emulators-${{ env.FIREBASE_VIRSION }}
      - name: Create .env.local file for ${{ matrix.app }}
        shell: bash
        env:
          DOT_ENV_PHOTO: ${{ secrets.DOT_ENV_PHOTO }}
          DOT_ENV_PHOTO_CLEANER: ${{ secrets.DOT_ENV_PHOTO_CLEANER }}
          DOT_ENV_STAMP: ${{ secrets.DOT_ENV_STAMP }}
        run: |
          # Convert app name to uppercase and replace hyphens with underscores
          # e.g., 'photo-cleaner' -> 'PHOTO_CLEANER'
          SECRET_SUFFIX=$(echo ${{ matrix.app }} | tr 'a-z-' 'A-Z_')
          
          # Construct the full environment variable name for the secret
          # e.g., 'DOT_ENV_PHOTO_CLEANER'
          SECRET_ENV_VAR="DOT_ENV_$SECRET_SUFFIX"
          
          # Use bash indirect expansion to get the value of the dynamically named variable
          # and write it to the .env.local file. Write to .env.local if .env exists, otherwise write to .env
          if [ -f "apps/${{ matrix.app }}/.env" ]; then
            echo "Writing to apps/${{ matrix.app }}/.env.local"
            echo "${!SECRET_ENV_VAR}" > apps/${{ matrix.app }}/.env.local
          else
            echo "Writing to apps/${{ matrix.app }}/.env"
            echo "${!SECRET_ENV_VAR}" > apps/${{ matrix.app }}/.env
          fi
      - name: Start Firebase emulators
        run: |
          pnpm --filter ${{ matrix.app }} run emulator &
          sleep 10
      - name: Run linting for ${{ matrix.app }}
        run: pnpm --filter ${{ matrix.app }} lint
      - name: Run tests and generate coverage for ${{ matrix.app }}
        run: pnpm --filter ${{ matrix.app }} coverage
      - name: Run build for ${{ matrix.app }}
        run: pnpm --filter ${{ matrix.app }} build
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.app }}
          path: apps/${{ matrix.app }}/coverage/coverage-*
          retention-days: 1
  ci-firebase:
    name: CI (firebase)
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: true
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - name: Check Firebase deployment
        shell: bash
        run: pnpm run deploy:fire:check
  ci-art:
    name: CI (art)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
#      - name: Activate Unity License
#        uses: game-ci/unity-activate@v2
#        env:
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: apps/art/Library
          key: Library-apps-art-${{ hashFiles('apps/art/ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            Library-apps-art-
      - name: Restore .NET tools
        run: dotnet tool restore
        working-directory: ./apps/art
      - name: Run dotnet format for art
        run: |
          chmod +x lint.sh
          ./lint.sh
        working-directory: ./apps/art
      # TODO: Unity test は時間がかかる & 現在はテストを書いていない & docker image が巨大で runner の容量が不足するのでスキップ
#      - name: Run Unity Tests for art
#        uses: game-ci/unity-test-runner@v4
#        env:
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#        with:
#          projectPath: apps/art
      # TODO: Build はライセンス認証後にエラーが発生するのでスキップ
#      - name: Build Unity Project for art
#        id: builder
#        uses: game-ci/unity-builder@v4
#        env:
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#        with:
#          projectPath: apps/art
#          # WebGL, StandaloneWindows64, Android, iOS
#          targetPlatform: WebGL
#          unityVersion: 'auto'
#          allowDirtyBuild: true
#      - name: Upload Build Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: build-art-${{ steps.builder.outputs.targetPlatform }}
#          path: ${{ steps.builder.outputs.buildPath }}
#          retention-days: 1
  # すべてのCIジョブが成功した後に、カバレッジレポートを投稿するジョブ
  report-coverage:
    name: Report Coverage
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage
          pattern: coverage-report-*
      - name: Report Photo booth coverage
        uses: davelosert/vitest-coverage-report-action@v2
        if: always()
        with:
          name: "Photo booth"
          json-summary-path: 'coverage/coverage-report-photo/coverage-summary.json'
          json-final-path: 'coverage/coverage-report-photo/coverage-final.json'
      - name: Report Stamp coverage
        uses: davelosert/vitest-coverage-report-action@v2
        if: always()
        with:
          name: "Stamp"
          json-summary-path: 'coverage/coverage-report-stamp/coverage-summary.json'
          json-final-path: 'coverage/coverage-report-stamp/coverage-final.json'
      - name: Report Photo cleaner coverage
        uses: davelosert/vitest-coverage-report-action@v2
        if: always()
        with:
          name: "Photo cleaner"
          json-summary-path: 'coverage/coverage-report-photo-cleaner/coverage-summary.json'
          json-final-path: 'coverage/coverage-report-photo-cleaner/coverage-final.json'

