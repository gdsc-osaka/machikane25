rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isStaff() {
      return isSignedIn() && request.auth.token.isStaff == true;
    }

    function allowedUserFields(data) {
      return data.keys().hasOnly([
        'createdAt',
        'lastCollectedAt',
        'stamps'
      ]);
    }

    function validStampKeys(stamps) {
      return stamps != null
        && stamps.keys().hasOnly([
        'reception',
        'photobooth',
        'art',
        'robot',
        'survey'
      ]);
    }

    function attendeeStampUpdateValid(stamps, previousStamps) {
      return stamps != null && validStampKeys(stamps);
    }

    function attendeeUpdateAllowed(userId) {
      return isOwner(userId)
        && allowedUserFields(request.resource.data)
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.giftReceivedAt == resource.data.giftReceivedAt
        && request.resource.data.rewardQr == resource.data.rewardQr
        && attendeeStampUpdateValid(
          request.resource.data.stamps,
          resource.data.stamps
        );
    }

    function staffGiftRedemptionAllowed(previousGiftReceivedAt, nextGiftReceivedAt) {
      return (previousGiftReceivedAt == null
        && nextGiftReceivedAt is timestamp)
        || nextGiftReceivedAt == previousGiftReceivedAt;
    }

    function staffUpdateAllowed() {
      return isStaff()
        && allowedUserFields(request.resource.data)
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.lastCollectedAt == resource.data.lastCollectedAt
        && request.resource.data.stamps == resource.data.stamps
        && staffGiftRedemptionAllowed(
          resource.data.giftReceivedAt,
          request.resource.data.giftReceivedAt
        );
    }

    match /users/{userId} {
      allow create: if isOwner(userId)
        && allowedUserFields(request.resource.data)
        && request.resource.data.createdAt is timestamp
        && request.resource.data.lastCollectedAt is timestamp
        && attendeeStampUpdateValid(request.resource.data.stamps, null);

      allow read: if isOwner(userId) || isStaff();
      allow list: if isStaff();

      allow update: if attendeeUpdateAllowed(userId) || staffUpdateAllowed();

      allow delete: if false;
    }
  }
}
